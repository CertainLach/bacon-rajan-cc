var searchIndex = {};
searchIndex['bacon_rajan_cc'] = {"items":[[0,"","bacon_rajan_cc","Thread-local reference-counted boxes (the `Cc<T>` type).",null,null],[3,"Cc","","A reference-counted pointer type over an immutable value.",null,null],[3,"Weak","","A weak version of `Cc<T>`.",null,null],[0,"trace","","Tracing traits, types, and implementation.",null,null],[11,"trace","alloc::boxed","",0,{"inputs":[{"name":"box"},{"name":"tracer"}],"output":null}],[11,"trace","core::cell","",1,{"inputs":[{"name":"cell"},{"name":"tracer"}],"output":null}],[11,"trace","","",2,{"inputs":[{"name":"refcell"},{"name":"tracer"}],"output":null}],[11,"trace","collections::btree::map","",3,{"inputs":[{"name":"btreemap"},{"name":"tracer"}],"output":null}],[11,"trace","std::collections::hash::map","",4,{"inputs":[{"name":"hashmap"},{"name":"tracer"}],"output":null}],[11,"trace","collections::linked_list","",5,{"inputs":[{"name":"linkedlist"},{"name":"tracer"}],"output":null}],[11,"trace","collections::vec_deque","",6,{"inputs":[{"name":"vecdeque"},{"name":"tracer"}],"output":null}],[11,"trace","std::ffi::c_str","",7,{"inputs":[{"name":"cstr"},{"name":"tracer"}],"output":null}],[11,"trace","","",8,{"inputs":[{"name":"cstring"},{"name":"tracer"}],"output":null}],[11,"trace","","",9,{"inputs":[{"name":"nulerror"},{"name":"tracer"}],"output":null}],[11,"trace","std::ffi::os_str","",10,{"inputs":[{"name":"osstr"},{"name":"tracer"}],"output":null}],[11,"trace","","",11,{"inputs":[{"name":"osstring"},{"name":"tracer"}],"output":null}],[11,"trace","std::io::buffered","",12,{"inputs":[{"name":"bufreader"},{"name":"tracer"}],"output":null}],[11,"trace","","",13,{"inputs":[{"name":"bufwriter"},{"name":"tracer"}],"output":null}],[11,"trace","std::io::cursor","",14,{"inputs":[{"name":"cursor"},{"name":"tracer"}],"output":null}],[11,"trace","std::io::util","",15,{"inputs":[{"name":"empty"},{"name":"tracer"}],"output":null}],[11,"trace","std::io::error","",16,{"inputs":[{"name":"error"},{"name":"tracer"}],"output":null}],[11,"trace","std::io::buffered","",17,{"inputs":[{"name":"intoinnererror"},{"name":"tracer"}],"output":null}],[11,"trace","","",18,{"inputs":[{"name":"linewriter"},{"name":"tracer"}],"output":null}],[11,"trace","std::io","",19,{"inputs":[{"name":"lines"},{"name":"tracer"}],"output":null}],[11,"trace","std::io::util","",20,{"inputs":[{"name":"repeat"},{"name":"tracer"}],"output":null}],[11,"trace","","",21,{"inputs":[{"name":"sink"},{"name":"tracer"}],"output":null}],[11,"trace","std::io","",22,{"inputs":[{"name":"split"},{"name":"tracer"}],"output":null}],[11,"trace","std::io::stdio","",23,{"inputs":[{"name":"stderr"},{"name":"tracer"}],"output":null}],[11,"trace","","",24,{"inputs":[{"name":"stdin"},{"name":"tracer"}],"output":null}],[11,"trace","","",25,{"inputs":[{"name":"stdout"},{"name":"tracer"}],"output":null}],[11,"trace","std::io","",26,{"inputs":[{"name":"take"},{"name":"tracer"}],"output":null}],[11,"trace","","",27,{"inputs":[{"name":"broadcast"},{"name":"tracer"}],"output":null}],[11,"trace","","",28,{"inputs":[{"name":"chars"},{"name":"tracer"}],"output":null}],[11,"trace","","",29,{"inputs":[{"name":"tee"},{"name":"tracer"}],"output":null}],[11,"trace","std::net::parser","",30,{"inputs":[{"name":"addrparseerror"},{"name":"tracer"}],"output":null}],[11,"trace","std::net::ip","",31,{"inputs":[{"name":"ipv4addr"},{"name":"tracer"}],"output":null}],[11,"trace","","",32,{"inputs":[{"name":"ipv6addr"},{"name":"tracer"}],"output":null}],[11,"trace","std::net::addr","",33,{"inputs":[{"name":"socketaddrv4"},{"name":"tracer"}],"output":null}],[11,"trace","","",34,{"inputs":[{"name":"socketaddrv6"},{"name":"tracer"}],"output":null}],[11,"trace","std::net::tcp","",35,{"inputs":[{"name":"tcplistener"},{"name":"tracer"}],"output":null}],[11,"trace","","",36,{"inputs":[{"name":"tcpstream"},{"name":"tracer"}],"output":null}],[11,"trace","std::net::udp","",37,{"inputs":[{"name":"udpsocket"},{"name":"tracer"}],"output":null}],[11,"trace","core::option","",38,{"inputs":[{"name":"option"},{"name":"tracer"}],"output":null}],[11,"trace","std::path","",39,{"inputs":[{"name":"path"},{"name":"tracer"}],"output":null}],[11,"trace","","",40,{"inputs":[{"name":"pathbuf"},{"name":"tracer"}],"output":null}],[11,"trace","std::process","",41,{"inputs":[{"name":"child"},{"name":"tracer"}],"output":null}],[11,"trace","","",42,{"inputs":[{"name":"childstderr"},{"name":"tracer"}],"output":null}],[11,"trace","","",43,{"inputs":[{"name":"childstdin"},{"name":"tracer"}],"output":null}],[11,"trace","","",44,{"inputs":[{"name":"childstdout"},{"name":"tracer"}],"output":null}],[11,"trace","","",45,{"inputs":[{"name":"command"},{"name":"tracer"}],"output":null}],[11,"trace","","",46,{"inputs":[{"name":"exitstatus"},{"name":"tracer"}],"output":null}],[11,"trace","","",47,{"inputs":[{"name":"output"},{"name":"tracer"}],"output":null}],[11,"trace","","",48,{"inputs":[{"name":"stdio"},{"name":"tracer"}],"output":null}],[11,"trace","alloc::rc","",49,{"inputs":[{"name":"rc"},{"name":"tracer"}],"output":null}],[11,"trace","","",50,{"inputs":[{"name":"weak"},{"name":"tracer"}],"output":null}],[11,"trace","core::result","",51,{"inputs":[{"name":"result"},{"name":"tracer"}],"output":null}],[11,"trace","alloc::arc","",52,{"inputs":[{"name":"arc"},{"name":"tracer"}],"output":null}],[11,"trace","std::sync::barrier","",53,{"inputs":[{"name":"barrier"},{"name":"tracer"}],"output":null}],[11,"trace","std::sync::condvar","",54,{"inputs":[{"name":"condvar"},{"name":"tracer"}],"output":null}],[11,"trace","std::sync::mutex","",55,{"inputs":[{"name":"mutex"},{"name":"tracer"}],"output":null}],[11,"trace","std::sync::once","",56,{"inputs":[{"name":"once"},{"name":"tracer"}],"output":null}],[11,"trace","std::sys_common::poison","",57,{"inputs":[{"name":"poisonerror"},{"name":"tracer"}],"output":null}],[11,"trace","std::sync::rwlock","",58,{"inputs":[{"name":"rwlock"},{"name":"tracer"}],"output":null}],[11,"trace","std::thread","",59,{"inputs":[{"name":"builder"},{"name":"tracer"}],"output":null}],[11,"trace","","",60,{"inputs":[{"name":"joinhandle"},{"name":"tracer"}],"output":null}],[11,"trace","std::thread::local","",61,{"inputs":[{"name":"localkey"},{"name":"tracer"}],"output":null}],[11,"trace","std::thread","",62,{"inputs":[{"name":"thread"},{"name":"tracer"}],"output":null}],[6,"Tracer","bacon_rajan_cc::trace","A `Tracer` is a callback function that is invoked for each `CcBoxPtr` owned\nby an instance of something.",null,null],[8,"Trace","","A trait that informs cycle collector how to find memory that is owned by a\n`Trace` instance and managed by the cycle collector.",null,null],[10,"trace","","Invoke the `Tracer` on each of the `CcBoxPtr`s owned by this `Trace`\ninstance.",63,{"inputs":[{"name":"trace"},{"name":"tracer"}],"output":null}],[0,"collect","bacon_rajan_cc","Implementation of cycle detection and collection.",null,null],[5,"number_of_roots_buffered","bacon_rajan_cc::collect","Return the number of potential cycle roots currently buffered for cycle\ncollection.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"collect_cycles","","Invoke cycle collection for all `Cc<T>`s on this thread.",null,{"inputs":[],"output":null}],[11,"new","bacon_rajan_cc","Constructs a new `Cc<T>`.",64,{"inputs":[{"name":"cc"},{"name":"t"}],"output":{"name":"cc"}}],[11,"downgrade","","Downgrades the `Cc<T>` to a `Weak<T>` reference.",64,{"inputs":[{"name":"cc"}],"output":{"name":"weak"}}],[11,"is_unique","","Returns true if there are no other `Cc` or `Weak<T>` values that share\nthe same inner value.",64,{"inputs":[{"name":"cc"}],"output":{"name":"bool"}}],[11,"try_unwrap","","Unwraps the contained value if the `Cc<T>` is unique.",64,{"inputs":[{"name":"cc"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Cc<T>` is\nunique.",64,{"inputs":[{"name":"cc"}],"output":{"name":"option"}}],[11,"strong_count","","Get the number of strong references to this value.",64,{"inputs":[{"name":"cc"}],"output":{"name":"usize"}}],[11,"weak_count","","Get the number of weak references to this value.",64,{"inputs":[{"name":"cc"}],"output":{"name":"usize"}}],[11,"make_unique","","Make a mutable reference from the given `Cc<T>`.",64,{"inputs":[{"name":"cc"}],"output":{"name":"t"}}],[11,"deref","","",64,{"inputs":[{"name":"cc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Cc<T>`.",64,{"inputs":[{"name":"cc"}],"output":null}],[11,"clone","","Makes a clone of the `Cc<T>`.",64,{"inputs":[{"name":"cc"}],"output":{"name":"cc"}}],[11,"default","","Creates a new `Cc<T>`, with the `Default` value for `T`.",64,{"inputs":[{"name":"cc"}],"output":{"name":"cc"}}],[11,"eq","","Equality for two `Cc<T>`s.",64,{"inputs":[{"name":"cc"},{"name":"cc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Cc<T>`s.",64,{"inputs":[{"name":"cc"},{"name":"cc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Cc<T>`s.",64,{"inputs":[{"name":"cc"},{"name":"cc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Cc<T>`s.",64,{"inputs":[{"name":"cc"},{"name":"cc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Cc<T>`s.",64,{"inputs":[{"name":"cc"},{"name":"cc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Cc<T>`s.",64,{"inputs":[{"name":"cc"},{"name":"cc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Cc<T>`s.",64,{"inputs":[{"name":"cc"},{"name":"cc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Cc<T>`s.",64,{"inputs":[{"name":"cc"},{"name":"cc"}],"output":{"name":"ordering"}}],[11,"hash","","",64,{"inputs":[{"name":"cc"},{"name":"h"}],"output":null}],[11,"fmt","","",64,{"inputs":[{"name":"cc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"cc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"cc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",65,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",65,{"inputs":[{"name":"weak"}],"output":null}],[11,"clone","","Makes a clone of the `Weak<T>`.",65,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",65,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"trace","","",64,{"inputs":[{"name":"cc"},{"name":"tracer"}],"output":null}],[11,"trace","","",65,{"inputs":[{"name":"weak"},{"name":"tracer"}],"output":null}],[11,"data","","",65,{"inputs":[{"name":"weak"}],"output":{"name":"ccboxdata"}}],[11,"drop_value","","",65,{"inputs":[{"name":"weak"}],"output":null}],[11,"deallocate","","",65,{"inputs":[{"name":"weak"}],"output":null}]],"paths":[[3,"Box"],[3,"Cell"],[3,"RefCell"],[3,"BTreeMap"],[3,"HashMap"],[3,"LinkedList"],[3,"VecDeque"],[3,"CStr"],[3,"CString"],[3,"NulError"],[3,"OsStr"],[3,"OsString"],[3,"BufReader"],[3,"BufWriter"],[3,"Cursor"],[3,"Empty"],[3,"Error"],[3,"IntoInnerError"],[3,"LineWriter"],[3,"Lines"],[3,"Repeat"],[3,"Sink"],[3,"Split"],[3,"Stderr"],[3,"Stdin"],[3,"Stdout"],[3,"Take"],[3,"Broadcast"],[3,"Chars"],[3,"Tee"],[3,"AddrParseError"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpListener"],[3,"TcpStream"],[3,"UdpSocket"],[4,"Option"],[3,"Path"],[3,"PathBuf"],[3,"Child"],[3,"ChildStderr"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"Command"],[3,"ExitStatus"],[3,"Output"],[3,"Stdio"],[3,"Rc"],[3,"Weak"],[4,"Result"],[3,"Arc"],[3,"Barrier"],[3,"Condvar"],[3,"Mutex"],[3,"Once"],[3,"PoisonError"],[3,"RwLock"],[3,"Builder"],[3,"JoinHandle"],[3,"LocalKey"],[3,"Thread"],[8,"Trace"],[3,"Cc"],[3,"Weak"]]};
initSearch(searchIndex);
